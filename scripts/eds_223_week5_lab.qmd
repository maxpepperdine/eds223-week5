---
title: "EDS 223 Week 5 Lab"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Load packages

```{r}
library(sf) # vector handling
library(terra) # raster handling
library(tidyverse)
library(tmap) # map making
library(spData) # spatial data
library(spDataLarge) # more spatial data
library(viridisLite)
```

## Load data 

```{r}
# load raster dataset
elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

# load vector dataset
boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
```

#### Check CRS's; if they don't match, update them 

```{r}
# check if coordinate reference systems match
if(crs(elevation) == crs(boundary)) {
  print("Coordinate reference systems match")
} else{
  warning("Updating coordinate reference systems to match")
  # transform data to match
  boundary <- st_transform(boundary, st_crs(elevation))
}
```

#### Plot data

```{r}
tm_shape(elevation) + 
  tm_raster(title = "Elevation (m)") + 
tm_shape(boundary) + 
  tm_borders(lwd = 2) + 
tm_layout(legend.outside = TRUE)
```

## Raster cropping 

#### `terra::crop()`

* With `crop()`, we eliminate grid cells that fall outside the extent of the park and reduce the size of the raster

```{r}
# crop raster to the extent of the vector object 
elevation_cropped <- crop(elevation, boundary)

# plot cropped raster
tm_shape(elevation_cropped) + 
  tm_raster(title = "Elevation (m)") + 
tm_shape(boundary) + 
  tm_borders(lwd = 2) + 
tm_layout(legend.outside = TRUE)
```

#### `terra::mask()` 

* With `mask()`, we eliminate grid cells that fall outside the extent of the park and keep the size of the raster

```{r}
# mask raster based on vector object
# (cells outside of vector are converted to NA)
elevation_masked <- mask(elevation, boundary)

# plot cropped raster
tm_shape(elevation_masked) + 
  tm_raster(title = "Elevation (m)") + 
tm_shape(boundary) + 
  tm_borders(lwd = 2) + 
tm_layout(legend.outside = TRUE)
```

#### Combine `crop()` and `mask()`

* Often, we will want to combine both cropping and masking to reduce the size of the raster as much as possible

```{r}
# crop and mask raster
elevation_final <- mask(elevation_cropped, boundary)
```

#### Using `mask()` to remove objects within a boundary 

* In some cases, we may want to mask the raster cells inside of the boundaries (i.e. assign cells inside the park to `NA`). We can do so with `terra::mask()` by setting the argument `inverse = TRUE`.

```{r}
# mask raster based on vector object
# (cells inside of vector are converted to NA)
elevation_inv_masked <- mask(elevation_cropped, boundary, inverse = TRUE)
```

#### Plot them all together 

```{r}
map1 <- tm_shape(elevation) +
  tm_raster(legend.show = FALSE) +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(main.title = "original")

map2 <- tm_shape(elevation_cropped) +
  tm_raster(legend.show = FALSE) +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(main.title = "cropped")

map3 <- tm_shape(elevation_masked) +
  tm_raster(legend.show = FALSE) +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(main.title = "masked")

map4 <- tm_shape(elevation_final) +
  tm_raster(legend.show = FALSE) +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(main.title = "cropped & masked")

map5 <- tm_shape(elevation_inv_masked) +
  tm_raster(legend.show = FALSE) +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(main.title = "inverse mask")

tmap_arrange(map1, map2, map3, map4, map5, nrow = 2)
```

## Raster vectorization 

* There are several ways to convert raster data into vector. 

* The most common, and straightforward, is converting raster grid cells into polygons. 

* We could simply convert all grid cells into polygons, but it may be more helpful to create polygons based on some condition

* In this example, we’ll select grid cells higher than 2000 meters by masking the elevation raster. 

* We’ll then convert these grid cells into polygons using the `terra::as.polygons()` function and turn this into a `sf` object.

```{r}
# this layer is masked to cells inside the park boundary
elevation_mask <- elevation_final 
# create mask based on a value of cells
elevation_mask[elevation_mask < 2000] <- NA


# vectorize the raster
elevation_mask_poly <- as.polygons(elevation_mask) %>% 
  st_as_sf()
```

#### Plot the layers

```{r}
map1 <- tm_shape(elevation_mask) +
  tm_raster() +
  tm_layout(legend.outside = TRUE,
            main.title = "masked raster")

map2 <- tm_shape(elevation_mask_poly) +
  tm_polygons() +
  tm_layout(main.title = "vectorized raster")

tmap_arrange(map1, map2, nrow = 1)
```

#### Dissolve all of the polygons into one boundary

```{r}
# make the elevation_mask_poly valid polygons 
elevation_mask_poly <- st_make_valid(elevation_mask_poly)

elevation_mask_poly_dissolve <- st_union(elevation_mask_poly, 
                                         by_feature = FALSE)


#### plot the dissolved polygons

# check if the polygons are valid and fix them if not 
tmap_options(check.and.fix = TRUE)

tm_shape(elevation_mask_poly_dissolve) +
  tm_polygons() +
  tm_layout(main.title = "dissolved")
```











